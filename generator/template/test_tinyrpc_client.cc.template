#include <google/protobuf/service.h>
#include "tinyrpc/net/rpc/rpc_channel.h"
#include "tinyrpc/net/rpc/rpc_controller.h"
#include "tinyrpc/net/rpc/rpc_closure.h"
#include "tinyrpc/tool/log.h"
${INCLUDE_PB_HEADER}


void test_client(const std::string& addr){

    NEWMESSAGE(${REQUEST_TYPE}, request);
    NEWMESSAGE(${RESPONSE_TYPE}, response);

    // request->set_xxx(100);

    NEWRPCCONTROLLER(controller);
    controller->SetTimeout(2000);

    std::shared_ptr<tinyrpc::RpcClosure> closure = std::make_shared<tinyrpc::RpcClosure>([request, response, controller]() mutable {
        if (controller->GetErrorCode() == 0){
        INFOLOG("call rpc success, request[%s], response[%s]", request->ShortDebugString().c_str(), response->ShortDebugString().c_str());
        }else {
            ERRORLOG("call rpc failed, request[%s], error code[%d], error info[%s]", 
            request->ShortDebugString().c_str(), 
            controller->GetErrorCode(), 
            controller->GetErrorInfo().c_str());
        }

    exit(0);
  });

  CALLRPRC(addr, ${STUBCLASS}, ${METHOD_NAME}, controller, request, response, closure);

} 

int main(int argc, char* argv[]) {

  tinyrpc::Config::SetGlobalConfig(NULL);

  tinyrpc::Logger::InitGlobalLogger(0);

  std::string addr = std::string(argv[1]) + ":" + std::string(argv[2]);  

  test_client(addr);

  return 0;
}